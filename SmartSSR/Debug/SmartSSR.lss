
SmartSSR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d5  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000511  00000000  00000000  000007bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f5  00000000  00000000  00000cce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00000fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000323  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bc  00000000  00000000  0000139b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001457  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	3f c0       	rjmp	.+126    	; 0x84 <__vector_2>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	5b c0       	rjmp	.+182    	; 0xc0 <__vector_4>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	4c c0       	rjmp	.+152    	; 0xac <__vector_9>
  14:	41 c0       	rjmp	.+130    	; 0x98 <__vector_10>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	24 d0       	rcall	.+72     	; 0x78 <main>
  30:	51 c0       	rjmp	.+162    	; 0xd4 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <init_hw>:
/* PB0:2 are set to output with PB2 being Timer0-A. PB3 is set as input	*/
/* PCINT0 (PA0) interrupt is enabled									*/
/************************************************************************/
void init_hw(void){
	
	cli();								// Disable interrupts so registers can be changed without interruption
  34:	f8 94       	cli
	
	// Clock init
	CLKPR = (1 << CLKPCE);				// Clock Prescaler Change Enable
  36:	90 e8       	ldi	r25, 0x80	; 128
  38:	96 bd       	out	0x26, r25	; 38
	CLKPR = (1 << CLKPS0);				// Prescaler = 2: 4MHz CPUclk 
  3a:	81 e0       	ldi	r24, 0x01	; 1
  3c:	86 bd       	out	0x26, r24	; 38
	
	// PortA setup
	DDRA = (1 << DDA7);								//PA7 is output 1
  3e:	9a bb       	out	0x1a, r25	; 26
	PORTA = (1 << PORTA0);							// PA0 with pull-up, all other off
  40:	8b bb       	out	0x1b, r24	; 27
	
	// PortB setup
	DDRB = (1 << DDB0) | (1 << DDB1) | (1 << DDB2);	// PB0:2 are outputs 2:4
  42:	97 e0       	ldi	r25, 0x07	; 7
  44:	97 bb       	out	0x17, r25	; 23
	PORTB = 0;										// All outputs off
  46:	18 ba       	out	0x18, r1	; 24
	
	// Interrupt setup
	GIMSK = (1<<PCIE0);								// Pin Change Interrupt Enable 0 (PCINT0:7)
  48:	90 e1       	ldi	r25, 0x10	; 16
  4a:	9b bf       	out	0x3b, r25	; 59
	PCMSK0 = (1 << PCINT0);							// Pin Change Mask Register 0 (PCINT0)	
  4c:	82 bb       	out	0x12, r24	; 18
  4e:	08 95       	ret

00000050 <init_wdt>:
void wdt_disable (void)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
  50:	0f b6       	in	r0, 0x3f	; 63
  52:	f8 94       	cli
  54:	a8 95       	wdr
  56:	81 b5       	in	r24, 0x21	; 33
  58:	88 61       	ori	r24, 0x18	; 24
  5a:	81 bd       	out	0x21, r24	; 33
  5c:	11 bc       	out	0x21, r1	; 33
  5e:	0f be       	out	0x3f, r0	; 63
/************************************************************************/
/* Initialize the Watchdog with 1s !! WOOF WOOF                         */
/************************************************************************/
void init_wdt (void){
	wdt_disable();
	WDTCSR |= (1 << WDIE);
  60:	81 b5       	in	r24, 0x21	; 33
  62:	80 64       	ori	r24, 0x40	; 64
  64:	81 bd       	out	0x21, r24	; 33
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
  66:	9e e0       	ldi	r25, 0x0E	; 14
  68:	88 e1       	ldi	r24, 0x18	; 24
  6a:	0f b6       	in	r0, 0x3f	; 63
  6c:	f8 94       	cli
  6e:	a8 95       	wdr
  70:	81 bd       	out	0x21, r24	; 33
  72:	0f be       	out	0x3f, r0	; 63
  74:	91 bd       	out	0x21, r25	; 33
  76:	08 95       	ret

00000078 <main>:
/************************************************************************/
/* Main Function, start here                                            */
/************************************************************************/
int main(void)
{
uint8_t resetReason = MCUSR;
  78:	84 b7       	in	r24, 0x34	; 52
	
	init_hw();
  7a:	dc df       	rcall	.-72     	; 0x34 <init_hw>
	init_wdt();
  7c:	e9 df       	rcall	.-46     	; 0x50 <init_wdt>
	sei();
  7e:	78 94       	sei
	
    while (1) 
    {
		wdt_reset();
  80:	a8 95       	wdr
		
    }
  82:	fe cf       	rjmp	.-4      	; 0x80 <main+0x8>

00000084 <__vector_2>:


/************************************************************************/
/* Zerocrossing interrupt on PA0/PCINT0                                 */
/************************************************************************/
ISR(PCINT0_vect){
  84:	1f 92       	push	r1
  86:	0f 92       	push	r0
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	0f 92       	push	r0
  8c:	11 24       	eor	r1, r1
	
	
}
  8e:	0f 90       	pop	r0
  90:	0f be       	out	0x3f, r0	; 63
  92:	0f 90       	pop	r0
  94:	1f 90       	pop	r1
  96:	18 95       	reti

00000098 <__vector_10>:


ISR(TIM0_COMPB_vect){
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
	
	
}
  a2:	0f 90       	pop	r0
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	0f 90       	pop	r0
  a8:	1f 90       	pop	r1
  aa:	18 95       	reti

000000ac <__vector_9>:

ISR(TIM0_COMPA_vect){
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
	
	
}
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <__vector_4>:

ISR(WATCHDOG_vect){
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
	
	
}
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
