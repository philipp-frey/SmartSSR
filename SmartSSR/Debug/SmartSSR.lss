
SmartSSR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a0  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000511  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000406  00000000  00000000  00000e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000158  00000000  00000000  00001248  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000382  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000149  00000000  00000000  00001722  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000186b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	52 c0       	rjmp	.+164    	; 0xac <__vector_3>
   8:	7a c0       	rjmp	.+244    	; 0xfe <__vector_4>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	61 c0       	rjmp	.+194    	; 0xd6 <__vector_9>
  14:	56 c0       	rjmp	.+172    	; 0xc2 <__vector_10>
  16:	69 c0       	rjmp	.+210    	; 0xea <__vector_11>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	79 c0       	rjmp	.+242    	; 0x112 <__vector_15>
  20:	82 c0       	rjmp	.+260    	; 0x126 <__vector_16>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	32 d0       	rcall	.+100    	; 0x94 <main>
  30:	84 c0       	rjmp	.+264    	; 0x13a <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <init_gpio>:

	DDRA &= ~(1 << DDA4);		//set the USCK pin as input
	DDRA &= ~(1<<DDA6);			//set the DI pin as input
	DDRA |= (1<<DDA5);			//set the DO pin as output

	USICR |= (1<<USISIE) | (1<<USIOIE);			// Enable interrupts on start and overflow
  34:	85 e8       	ldi	r24, 0x85	; 133
  36:	8a bb       	out	0x1a, r24	; 26
  38:	82 e0       	ldi	r24, 0x02	; 2
  3a:	8b bb       	out	0x1b, r24	; 27
  3c:	87 e0       	ldi	r24, 0x07	; 7
  3e:	87 bb       	out	0x17, r24	; 23
  40:	18 ba       	out	0x18, r1	; 24
  42:	08 95       	ret

00000044 <init_extInterrupt>:
  44:	8b b7       	in	r24, 0x3b	; 59
  46:	80 61       	ori	r24, 0x10	; 16
  48:	8b bf       	out	0x3b, r24	; 59
  4a:	91 9a       	sbi	0x12, 1	; 18
  4c:	08 95       	ret

0000004e <init_adc>:
  4e:	82 ea       	ldi	r24, 0xA2	; 162
  50:	87 b9       	out	0x07, r24	; 7
  52:	86 b1       	in	r24, 0x06	; 6
  54:	87 7d       	andi	r24, 0xD7	; 215
  56:	86 b9       	out	0x06, r24	; 6
  58:	37 9a       	sbi	0x06, 7	; 6
  5a:	36 9a       	sbi	0x06, 6	; 6
  5c:	08 95       	ret

0000005e <init_timer0>:
  5e:	80 ef       	ldi	r24, 0xF0	; 240
  60:	80 bf       	out	0x30, r24	; 48
  62:	87 e0       	ldi	r24, 0x07	; 7
  64:	89 bf       	out	0x39, r24	; 57
  66:	12 be       	out	0x32, r1	; 50
  68:	16 be       	out	0x36, r1	; 54
  6a:	1c be       	out	0x3c, r1	; 60
  6c:	84 e0       	ldi	r24, 0x04	; 4
  6e:	83 bf       	out	0x33, r24	; 51
  70:	08 95       	ret

00000072 <init_wdt>:
void wdt_disable (void)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
  72:	0f b6       	in	r0, 0x3f	; 63
  74:	f8 94       	cli
  76:	a8 95       	wdr
  78:	81 b5       	in	r24, 0x21	; 33
  7a:	88 61       	ori	r24, 0x18	; 24
  7c:	81 bd       	out	0x21, r24	; 33
  7e:	11 bc       	out	0x21, r1	; 33
  80:	0f be       	out	0x3f, r0	; 63
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
  82:	9e e0       	ldi	r25, 0x0E	; 14
  84:	88 e1       	ldi	r24, 0x18	; 24
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	a8 95       	wdr
  8c:	81 bd       	out	0x21, r24	; 33
  8e:	0f be       	out	0x3f, r0	; 63
  90:	91 bd       	out	0x21, r25	; 33
  92:	08 95       	ret

00000094 <main>:
/************************************************************************/
/* Main Function, START here                                            */
/************************************************************************/
int main(void)
{
uint8_t resetReason = MCUSR;
  94:	84 b7       	in	r24, 0x34	; 52
	
	cli();				// Disable interrupts so registers can be changed without interruption
  96:	f8 94       	cli

//	init_clk();			// Initializes CLK to 4MHz
	init_gpio();		// Initializes I/Os
  98:	cd df       	rcall	.-102    	; 0x34 <init_gpio>
	PORTA |= (1 << PORTA2);		// Toggle LED
  9a:	da 9a       	sbi	0x1b, 2	; 27
	init_adc();			// Initializes ADC (Temp sens)
  9c:	d8 df       	rcall	.-80     	; 0x4e <init_adc>
	init_timer0();		// Initializes timer0
  9e:	df df       	rcall	.-66     	; 0x5e <init_timer0>
	init_wdt();			// Initializes watchdog to 1s
  a0:	e8 df       	rcall	.-48     	; 0x72 <init_wdt>
	init_extInterrupt();// Initializes external interrupts on I/O
  a2:	d0 df       	rcall	.-96     	; 0x44 <init_extInterrupt>
	PORTA &= ~(1 << PORTA2);	// Toggle LED
  a4:	da 98       	cbi	0x1b, 2	; 27
	sei();				// Enable all interrupts
  a6:	78 94       	sei
	
    while (1) 
    {
		wdt_reset();
  a8:	a8 95       	wdr
		
		
    }
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <main+0x14>

000000ac <__vector_3>:
}

/************************************************************************/
/* Zerocrossing interrupt on PA1/PCINT1                                 */
/************************************************************************/
ISR(PCINT1_vect){
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
	TCNT0 = 0;									// Reset counter
  b6:	12 be       	out	0x32, r1	; 50
	//PORTA ^= (1 << PORTA0);	// Toggle LED
}
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <__vector_10>:

/************************************************************************/
/* Timer0 Compare B interrupt                                           */
/************************************************************************/
ISR(TIM0_COMPB_vect){
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
	
	
}
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <__vector_9>:

/************************************************************************/
/* Timer0 Compare A interrupt                                           */
/************************************************************************/
ISR(TIM0_COMPA_vect){
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
	
	
}
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <__vector_11>:

/************************************************************************/
/* Timer0 overflow interrupt                                            */
/************************************************************************/
ISR(TIM0_OVF_vect){
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
	
	
}
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <__vector_4>:

/************************************************************************/
/* Watchdog interrupt                                                   */
/************************************************************************/
ISR(WATCHDOG_vect){
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1

	
}
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <__vector_15>:

/************************************************************************/
/* USI Start interrupt                                                  */
/************************************************************************/
ISR(USI_STR_vect){
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1


}
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <__vector_16>:

/************************************************************************/
/*  USI Overflow interrupt                                              */
/************************************************************************/
ISR(USI_OVF_vect){
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1


}
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
