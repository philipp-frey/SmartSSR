
SmartSSR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a9  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000511  00000000  00000000  00000955  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000405  00000000  00000000  00000e66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  0000126c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000382  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000163  00000000  00000000  0000174e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000018b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	58 c0       	rjmp	.+176    	; 0xb8 <__vector_3>
   8:	80 c0       	rjmp	.+256    	; 0x10a <__vector_4>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	67 c0       	rjmp	.+206    	; 0xe2 <__vector_9>
  14:	5c c0       	rjmp	.+184    	; 0xce <__vector_10>
  16:	6f c0       	rjmp	.+222    	; 0xf6 <__vector_11>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	87 c0       	rjmp	.+270    	; 0x12e <__vector_15>
  20:	90 c0       	rjmp	.+288    	; 0x142 <__vector_16>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	3a d0       	rcall	.+116    	; 0xa4 <main>
  30:	92 c0       	rjmp	.+292    	; 0x156 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <init_clk>:

	DDRA &= ~(1 << DDA4);		//set the USCK pin as input
	DDRA &= ~(1<<DDA6);			//set the DI pin as input
	DDRA |= (1<<DDA5);			//set the DO pin as output

	USICR |= (1<<USISIE) | (1<<USIOIE);			// Enable interrupts on start and overflow
  34:	80 e8       	ldi	r24, 0x80	; 128
  36:	86 bd       	out	0x26, r24	; 38
  38:	81 e0       	ldi	r24, 0x01	; 1
  3a:	86 bd       	out	0x26, r24	; 38
  3c:	08 95       	ret

0000003e <init_gpio>:
  3e:	82 e8       	ldi	r24, 0x82	; 130
  40:	8a bb       	out	0x1a, r24	; 26
  42:	82 e0       	ldi	r24, 0x02	; 2
  44:	8b bb       	out	0x1b, r24	; 27
  46:	87 e0       	ldi	r24, 0x07	; 7
  48:	87 bb       	out	0x17, r24	; 23
  4a:	18 ba       	out	0x18, r1	; 24
  4c:	08 95       	ret

0000004e <init_extInterrupt>:
  4e:	80 e1       	ldi	r24, 0x10	; 16
  50:	8b bf       	out	0x3b, r24	; 59
  52:	82 e0       	ldi	r24, 0x02	; 2
  54:	82 bb       	out	0x12, r24	; 18
  56:	08 95       	ret

00000058 <init_adc>:
  58:	82 ea       	ldi	r24, 0xA2	; 162
  5a:	87 b9       	out	0x07, r24	; 7
  5c:	86 b1       	in	r24, 0x06	; 6
  5e:	87 7d       	andi	r24, 0xD7	; 215
  60:	86 b9       	out	0x06, r24	; 6
  62:	37 9a       	sbi	0x06, 7	; 6
  64:	36 9a       	sbi	0x06, 6	; 6
  66:	08 95       	ret

00000068 <init_timer0>:
  68:	80 ef       	ldi	r24, 0xF0	; 240
  6a:	80 bf       	out	0x30, r24	; 48
  6c:	87 e0       	ldi	r24, 0x07	; 7
  6e:	89 bf       	out	0x39, r24	; 57
  70:	12 be       	out	0x32, r1	; 50
  72:	16 be       	out	0x36, r1	; 54
  74:	1c be       	out	0x3c, r1	; 60
  76:	84 e0       	ldi	r24, 0x04	; 4
  78:	83 bf       	out	0x33, r24	; 51
  7a:	08 95       	ret

0000007c <init_wdt>:
void wdt_disable (void)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
  7c:	0f b6       	in	r0, 0x3f	; 63
  7e:	f8 94       	cli
  80:	a8 95       	wdr
  82:	81 b5       	in	r24, 0x21	; 33
  84:	88 61       	ori	r24, 0x18	; 24
  86:	81 bd       	out	0x21, r24	; 33
  88:	11 bc       	out	0x21, r1	; 33
  8a:	0f be       	out	0x3f, r0	; 63
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
  8c:	9e e0       	ldi	r25, 0x0E	; 14
  8e:	88 e1       	ldi	r24, 0x18	; 24
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	f8 94       	cli
  94:	a8 95       	wdr
  96:	81 bd       	out	0x21, r24	; 33
  98:	0f be       	out	0x3f, r0	; 63
  9a:	91 bd       	out	0x21, r25	; 33
/* Initialize the Watchdog with 1s !! WOOF WOOF                         */
/************************************************************************/
void init_wdt (void){
	wdt_disable();
	wdt_enable(WDTO_1S);
	WDTCSR |= (1 << WDIE);				// Watchdog enable interrupt
  9c:	81 b5       	in	r24, 0x21	; 33
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	81 bd       	out	0x21, r24	; 33
  a2:	08 95       	ret

000000a4 <main>:
/************************************************************************/
/* Main Function, START here                                            */
/************************************************************************/
int main(void)
{
uint8_t resetReason = MCUSR;
  a4:	84 b7       	in	r24, 0x34	; 52
	
	cli();				// Disable interrupts so registers can be changed without interruption
  a6:	f8 94       	cli

	init_clk();			// Initializes CLK to 4MHz
  a8:	c5 df       	rcall	.-118    	; 0x34 <init_clk>
	init_gpio();		// Initializes I/Os
  aa:	c9 df       	rcall	.-110    	; 0x3e <init_gpio>
	init_adc();
  ac:	d5 df       	rcall	.-86     	; 0x58 <init_adc>
	init_timer0();		// Initializes timer0
  ae:	dc df       	rcall	.-72     	; 0x68 <init_timer0>
	init_wdt();			// Initializes watchdog to 1s
  b0:	e5 df       	rcall	.-54     	; 0x7c <init_wdt>
	init_extInterrupt();// Initializes external interrupts on I/O
  b2:	cd df       	rcall	.-102    	; 0x4e <init_extInterrupt>

	sei();				// Enable all interrupts
  b4:	78 94       	sei
	
    while (1) 
    {
	//	wdt_reset();
		
    }
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <main+0x12>

000000b8 <__vector_3>:
}

/************************************************************************/
/* Zerocrossing interrupt on PA1/PCINT1                                 */
/************************************************************************/
ISR(PCINT1_vect){
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
	TCNT0 = 0;									// Reset counter
  c2:	12 be       	out	0x32, r1	; 50

}
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <__vector_10>:

/************************************************************************/
/* Timer0 Compare B interrupt                                           */
/************************************************************************/
ISR(TIM0_COMPB_vect){
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
	
	
}
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <__vector_9>:

/************************************************************************/
/* Timer0 Compare A interrupt                                           */
/************************************************************************/
ISR(TIM0_COMPA_vect){
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
	
	
}
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <__vector_11>:

/************************************************************************/
/* Timer0 overflow interrupt                                            */
/************************************************************************/
ISR(TIM0_OVF_vect){
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
	
	
}
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <__vector_4>:

/************************************************************************/
/* Watchdog interrupt                                                   */
/************************************************************************/
ISR(WATCHDOG_vect){
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
	PORTA ^= (1 << PORTA1);	// Toggle LED
 118:	9b b3       	in	r25, 0x1b	; 27
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	89 27       	eor	r24, r25
 11e:	8b bb       	out	0x1b, r24	; 27
	
}
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <__vector_15>:

/************************************************************************/
/* USI Start interrupt                                                  */
/************************************************************************/
ISR(USI_STR_vect){
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1


}
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <__vector_16>:

/************************************************************************/
/*  USI Overflow interrupt                                              */
/************************************************************************/
ISR(USI_OVF_vect){
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1


}
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
